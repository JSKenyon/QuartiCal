input-ms:
    _description: Arguments pertaining to the input measurement set.
    name:
        type: str
        help: Path to input measurement set.
        required: True
    column:
        type: str
        help: Name of input measurement set column.
        default: DATA
    weight-column:
        type: str
        help: Column to read weights from. Weights are applied by default.
              Specify UNITY to disable.
        default: WEIGHT_SPECTRUM
    time-chunk:
        type: TIME
        help: Chunk data up by this number of timeslots. This limits the amount
              of data processed at once. Smaller chunks allow for a smaller RAM
              footprint and greater parallelism, but this sets an upper limit
              on the solution intervals that may be employed. Specify as an
              integer number of timeslots, or a value with a unit
              (e.g. '300s'). 0 means use full time axis.
        default: "32"
    freq-chunk:
        type: int
        help:  Chunk data by this number of channels. See time-chunk for info.
               Specify as an integer number of channels, or a value with a unit
               (e.g. '128MHz'). 0 means use full frequency axis.
        default: 0
    is-bda:
        type: bool
        help: If set True, the input measurement set is assumed to have been
              averaged in a baseline dependent fashion.
        default: False
    # rebin-time:
    #     type: TIME
    #     help: Rebin data in time on the fly. Specify as a number of timeslots
    #           to average together, or a value with a unit (e.g. '5s').
    #     default: "1"
    # rebin-freq:
    #     type: FREQ
    #     help: Rebin data in frequency on the fly. Specify as a number of
    #           channels to average together, or a value with a unit
    #           (e.g. '4MHz').
    #     default: "1"
    # chunk-on:
    #     nargs: +
    #     type: str
    #     help: If set, chunking strategy will insert boundaries based on
    #           where the named column(s) jumps by >--input-ms-chunk-jump.
    #           Multiple column names may be given, separated by spaces. Use
    #           None to disable.
    #     default: SCAN_NUMBER
    # chunk-jump:
    #     nargs: +
    #     type: int
    #     help: The jump size used in conjunction with --input-ms-chunk-on.
    #           If 0, then any change in value is a jump. If n, then the
    #           change must be >n.
    #     default: 1
    # field:
    #     type: int
    #     help: FIELD_ID to read from the MS.
    #     default: 0
    # ddid:
    #     type: DDID
    #     help: DATA_DESC_IDs to read from the MS. Default reads all. Can be
    #           specified in any one of the following formats - "5", "5,6,7",
    #           "5:8" (exclusive range), "5:" (from 5 to last).
    #     default: None
    # chan:
    #     type: CHAN
    #     help: Channels to read (within each DDID). Default reads all. Can be
    #           specified in any one of the following formats - "5", "10:21"
    #           (exclusive range), "10:" (from 10 to last), ":10:2" (0 to 9
    #           inclusive, stepped by 2).
    #     default: None
    correlation-mode:
        type: str
        choices:
            - diag
            - full
        help: Determines whether we perform calibration using all the
              correlations or only the diagonal terms.
        default: diag

input-model:
    _description: Arguments pertaining to input model parameters.
    recipe:
        type: str
        help: Input model recipe. Add syntactic examples.
        required: True
    beam:
        type: str
        help: Path to beams. Apply beams during predict if specified eg.
              'beam_$(corr)_$(reim).fits' or 'beam_$(CORR)_$(REIM).fits'.
        default: None
    beam-l-axis:
        type: str
        choices:
            - "X"
            - "Y"
            - "~Y"
            - "~X"
            - "L"
            - "M"
            - "~L"
            - "~M"
        help: Determines the orientation of the beam l-axis.
        default: "X"
    beam-m-axis:
        type: str
        choices:
            - "X"
            - "Y"
            - "~Y"
            - "~X"
            - "L"
            - "M"
            - "~L"
            - "~M"
        help: Determines the orientation of the beam l-axis.
        default: "Y"
    invert-uvw:
        type: bool
        help: The UVW coordinates will be negated if this option is specified.
        default: True
    source-chunks:
        type: int
        help: The number of sources to predict simultaneously. Has a large
              impact on memory footprint.
        default: 10
    apply-p-jones:
        type: bool
        help: Determines whether P-Jones is incorporated in the predict. This
              should usually be left enabled.
        default: True

output:
    _description: Arguments pertaining to output products.
    # directory:
    #     type: str
    #     help: Base name of directory for output files. The suffix .cc-out will
    #           be implicitly appended, unless OUTDIR ends with a slash.
    #     default: quartical
    # file-name:
    #     type: str
    #     help: Base name for output files. Full base path will be
    #           OUTPUT_DIRECTORY[.cc-out]/OUTPUT_FILE_NAMExxx, unless
    #           OUTPUT_FILE_NAME contains a slash, in which case OUTPUT_DIRECTORY
    #           is ignored and OUTPUT_FILE_NAME is taken to be a full base path.
    #     default: cc
    # overwrite:
    #     type: bool
    #     help: Allow overwriting of existing output files. If this is set, and
    #           the output parset file exists, will raise an exception.
    #     default: False
    # backup:
    #     type: bool
    #     help: Allow automatic backup of existing output directories. Automatic
    #           backup is only used when OUTPUT_DIRECTORY is used (i.e.
    #           OUTPUT_FILE_NAME doesn't contain any slashes), and it ends with
    #           .cc-out (implicitly or explicitly). In this case, existing
    #           output directories are renamed to .cc.out.0, .1, etc.
    #     default: True
    # solver-mode:
    #     type: str
    #     choices:
    #         - solve
    #         - apply
    #     help: Solver operational mode. Determines whether gains are solved for
    #           or merely applied from stored solutions.
    #     default: solve
    visibility-product:
        nargs: +
        type: str
        choices:
            - corrected_data
            - corrected_residual
            - residual
        help: The desired output data product. Multiple data products can
              be specified, separated by spaces. All modes generate gains, the
              default doesn't produce a visibility output.
        default: None
    # solver-flags:
    #     type: bool
    #     help: Apply solver flags when writing data to measurement set.
    #     default: False
    column:
        nargs: +
        type: str
        help: Output MS column names for visibility outputs (if applicable).
              Column names will be used in order, matching the order of
              --output-data-product.
        default: CORRECTED_DATA
    # model-column:
    #     type: str
    #     help: If set, model visibilities will be written to the specified
    #           column.
    #     default: None
    # weight-column:
    #     type: str
    #     help: If set, robust solver weights will be written to the specified
    #           column.
    #     default: None
    # subtract-model:
    #     type: int
    #     help: Which model to subtract, if generating residuals.
    #     default: 0
    # subtract-directions:
    #     type: DIRECTIONS
    #     help: Which model directions to subtract, if generating residuals. ":"
    #           subtracts all. Can also be specified as "N", "N:M", ":N", "N:",
    #           "N,M,K".
    #     default: 0
    # plots:
    #     type: bool
    #     help: Generate output plots.
    #     default: False
    # casa-tables:
    #     type: bool
    #     help: Export gaintables to CASA caltable format. Tables are exported to
    #           same directory as set for QuartiCal databases.
    #     default: False

flags:
    _description: Arguments pertaining to flagging behaviour.
    apply-precal:
        nargs: +
        type: str
        help: Which flagsets will be applied prior to calibration. Use
              "~FLAGSET" to apply all bitflags except the named flagset
              ("~quartical" is will ignore preexisting QuartiCal flags).
              Use "FLAG" to just apply FLAG/FLAG_ROW.
        default:
            - ~quartical
    # add-bitflags:
    #     type: bool
    #     help: If True, will automatically insert a BITFLAG column if one is not
    #           already present. Will automatically populate the legacy bitflag
    #           from FLAG and FLAG_ROW.
    #     default: True
    reinit-bitflags:
        type: bool
        help: If true, reinitializes BITFLAG column from scratch. Useful if the
              existing BITFLAG column has been corrupted. Be careful with the
              state of the FLAG/FLAG_ROW colum when you use this option.
        default: False
    # save-flagset:
    #     type: str
    #     help: Save solver flags to the named flagset. If None or zero, the
    #           solver flags will not be saved.
    #     default: quartical
    mad-enable:
        type: bool
        help: Enables the MAD flagging routines.
        default: False
    bl-mad-threshold:
        type: float
        help: Multiplicative factor which determines whether or not a residual
              is considered to deviate significantly from the median of a given
              baseline. These values are flagged.
        default: 10
    global-mad-threshold:
        type: float
        help: Multiplicative factor which determines whether or not a residual
              is considered to deviate significantly from the median of the
              given data chunk. These values are flagged.
        default: 12

solver:
    _description: Arguments pertaining to solver behaviour.
    gain-terms:
        nargs: +
        type: str
        help: Gain terms for which we are solving. Multiple terms can be
              specified as --solver-gain-terms G B dE. Each term specified
              here has its own set of arguments which can be specified as
              --(gain)-(option).
        default: G
    # mode:
    #     type: str
    #     help: The mode in which the solver should operate. This is assumed to
    #           be the same for all terms specified by --solver-gain-terms. The
    #           first part of each option refers to the gain and the second to
    #           the visibilities. Thus, "full-full" means both the gains and
    #           the visibilities have four correlations, "diag-full" has diagonal
    #           gains and "diag-diag" implies that both the gains and
    #           visibilities are diagonal. Specifying "scalar" will assume both
    #           gains and visibilitites are scalar.
    #     choices:
    #         - full-full
    #         - diag-full
    #         - diag-diag
    #         - scalar
    #     default: full-full
    # precision:
    #     type: str
    #     help: Solver precision.
    #     choices:
    #         - single
    #         - double
    #     default: single
    # chisq-interval:
    #     type: int
    #     help: Number of iterations to perform between chi-squared checks. This
    #           is done to avoid computing the expensive chi-squared test evey
    #           iteration.
    #     default: 5
    # stall-fraction:
    #     type: float
    #     help: Minimum percentage of solutions which must have stalled (the
    #           chi-squared values are no longer improving) before terminating
    #           the solver.
    #     default: 0.99
    # iteration-recipe:
    #     nargs: +
    #     type: str
    #     help: If multiple gain terms have been specified, this option describes
    #           the manner in which we iterate over terms. For input
    #           --solver-iteration-recipe G dE G, G would be solved to
    #           convergence/maximum iterations, then dE and finally G once again.
    #           The number of iterations per term is based on their individual
    #           settings. If set to None, will solve each term in
    #           SOLVER_GAIN_TERMS once.
    #     default: None

parallel:
    _description: Arguments pertaining to parallelism and distribution.
    nthread:
        type: int
        help: Number of threads to use in the dask scheduler. Setting to zero
              (the default) will use all available resources.
        default: 0
    nworker:
        type: int
        help: Number of workers to use in the dask distributed scheduler.
              Advanced users only.
        default: 1
    address:
        type: str
        help: distributed scheduler address
        default: None
    scheduler:
        type: str
        help: Which dask scheduler to use. The default, multithreaded, is the
              most appropriate for non-server use.
        choices:
            - threads
            - distributed
            - single-threaded
        default: threads

(gain):
    _description: Arguments pertaining to a labelled (gain). (gain) MUST be
                  replaced with the labels specified by SOLVER_GAIN_TERMS. This
                  config section can be replicated for each gain term.
    type:
        type: str
        help: Type of gain matrix to solve for.
        choices:
            - complex
            - phase
            - robust
            - parametric
            - kalman
        default: complex
    # parametrisation:
    #     type: str
    #     help: If the gain is parametric, this determines the type of
    #           parametrisation.
    #     choices:
    #         - f-slope
    #         - t-slope
    #         - tf-plane
    #     default: f-slope
    # restrict-update:
    #     type: str
    #     help: Determines update restrictions. This does not change the solver
    #           type, but instead restricts the update rule.
    #     choices:
    #           - default
    #           - diagonal
    #           - diagonal-phase
    #           - diagonal-amp
    #     default: default
    direction-dependent:
        type: bool
        help: Determines whether this term is direction dependent.
        default: False
    # exclude-directions:
    #     nargs: +
    #     type: int
    #     help: For direction-dependent terms, makes the listed directions
    #           (specified by index) non-solvable. -1 disables.
    #     default: -1
    time-interval:
        type: int
        help: Number of timeslots to include in a single solution.
        default: 1
    freq-interval:
        type: int
        help: Number of channels to include in a single solution.
        default: 1
    # delta-threshold:
    #     type: float
    #     help: Convergence threshold. Solutions that change by less than this
    #           value are considered converged.
    #     default: 1e-6
    # chisq-threshold:
    #     type: float
    #     help: Threshold for solution stagnancy - if the relative improvement in
    #           the chi-squared is less than this value, then the solution is
    #           marked as stalled.
    #     default: 1e-6
    # conv-fraction:
    #     type: float
    #     help: Fraction of solutions required to converge before terminating the
    #           solver.
    #     default: 0.99
    # reference-antenna:
    #     type: int
    #     help: Reference antenna - its phase is guaranteed to be zero.
    #           -1 disables.
    #     default: -1
    # upper-clip:
    #     type: float
    #     help: Amplitude clipping - flag solutions with amplitudes above this
    #           value. 0 disables. Disabled by default.
    #     default: 0
    # lower-clip:
    #     type: float
    #     help: Amplitude clipping - flag solutions with any amplitudes below
    #           this value. 0 disables. Disabled by default.
    #     default: 0
    # clip-interval:
    #     type: int
    #     help: Number of iterations to perform between clips.
    #     default: 5
    # precomputed:
    #     type: bool
    #     help: Set to 1 (and specify load-from or xfer-from) to load a
    #           precomputed term from disk.
    #     default: False
    # load-from:
    #     type: str
    #     help: Load solutions from given database. The DB must define solutions
    #           on the same time/frequency grid (i.e. should normally come from
    #           calibrating the same pointing/observation).
    #     default: None
    # xfer-from:
    #     type: str
    #     help: Transfer solutions from given database. Similar to -load-from,
    #           but solutions will be interpolated onto the required
    #           time/frequency grid, so they can originate from a different field
    #           (e.g. from a calibrator).
    #     default: None
    # save-to:
    #     type: str
    #     help: Save solutions to given database.
    #     default: None



